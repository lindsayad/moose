# An explanation and results for the full runs of these inputs files are given in the contact documentation

[Tests]
  design = 'Constraints/index.md'
  issues = '#13080'
  [frictionless-nodal-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-min-lm-mortar-disp.i'
    exodiff = 'frictionless-nodal-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-fb-lm-mortar-disp.i'
    exodiff = 'frictionless-nodal-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-min-lm-nodal-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-min-lm-nodal-disp.i'
    exodiff = 'frictionless-nodal-min-lm-nodal-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, nodal application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-nodal-fb-lm-nodal-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-nodal-fb-lm-nodal-disp.i'
    exodiff = 'frictionless-nodal-fb-lm-nodal-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with nodal constraint enforcement, nodal application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictionless-mortar-min-lm-mortar-disp-coarse]
    allow_test_objects = true
    type = 'Exodiff'
    input = 'frictionless-mortar-min-lm-mortar-disp.i'
    exodiff = 'frictionless-mortar-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with mortar constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
  []
  [frictionless-mortar-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictionless-mortar-fb-lm-mortar-disp.i'
    exodiff = 'frictionless-mortar-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictionless bouncing block problem with mortar constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-mortar-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-mortar-min-lm-mortar-disp.i'
    exodiff = 'frictional-mortar-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with mortar constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    max_parallel = 1
    allow_test_objects = true
  []
  [frictional-mortar-fb-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-mortar-fb-lm-mortar-disp.i'
    exodiff = 'frictional-mortar-fb-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with mortar constraint enforcement, mortar application of forces, and fb NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-nodal-min-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-nodal-min-lm-mortar-disp.i'
    exodiff = 'frictional-nodal-min-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcement, mortar application of forces, and min NCP function'
    cli_args = "Mesh/file=long-bottom-block-1elem-blocks-coarse.e Executioner/end_time=50 Postprocessors/active='' Outputs/exodus/sync_only=true --redirect-output output.log"
    allow_warnings = True
    max_parallel = 1
    method = 'OPT'
    allow_test_objects = true
  []
  [frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp-coarse]
    type = 'Exodiff'
    input = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp.i'
    exodiff = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-disp_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcment for the normal LM using min NCP, mortar constraint enforcement of the tangential LM with fb, and mortar application of forces'
    cli_args = "Executioner/end_time=50 Postprocessors/active=''"
    allow_test_objects = true
  []
  [frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action]
    type = 'Exodiff'
    input = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action.i'
    exodiff = 'frictional-nodal-min-normal-lm-mortar-fb-tangential-lm-mortar-action_out.e'
    mesh_mode = 'REPLICATED'
    requirement = 'We will solve the frictional bouncing block problem with nodal constraint enforcment for the normal LM using min NCP, mortar constraint enforcement of the tangential LM with fb, and mortar application of forces using the ContactAction. The result shall be identical to that obtained by directly specifying individual objects.'
    cli_args = "Executioner/end_time=50 Postprocessors/active=''"
  []
  [reduced_active_set]
    requirement = 'The system shall be able to solve frictionless mechanical contact using a reduced active nonlinear function set scheme (RANFS) in conjunction with a node-face geometric discretization. The RANFS scheme shall be'
    [ranfs-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-svd.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'nonsingular both with bounds projection and'
      cli_args = 'Outputs/file_base=ranfs-project-svd'
    []
    [ranfs-dont-project-svd]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-svd.e'
      detail = 'without bounds projection and be'
      cli_args = 'Outputs/file_base=ranfs-dont-project-svd Executioner/line_search=none'
    []
    [ranfs-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-project-amg.e'
      detail = 'solvable with amg both with bounds projection'
      cli_args = 'Outputs/file_base=ranfs-project-amg -pc_type hypre -pc_hypre_type boomeramg'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
    [ranfs-dont-project-amg]
      type = 'Exodiff'
      input = 'frictionless-nodal-reduced-active-set.i'
      exodiff = 'ranfs-dont-project-amg.e'
      detail = 'and without bounds projection'
      cli_args = 'Outputs/file_base=ranfs-dont-project-amg Executioner/line_search=none -pc_type hypre -pc_hypre_type boomeramg'
      expect_out = '[bB][oO][oO][mM][eE][rR][aA][mM][gG]'
    []
  []
  [tied_node]
    requirement = 'Using a RANFS scheme with Lagrange multipliers corresponding to equality constraints the system shall be able to '
    [physics]
      type = 'Exodiff'
      input = tied-nodes.i
      exodiff = 'tied-nodes_exo.e'
      absent_out = '[1-9]+[0-9]* of 16 singular values'
      expect_out = '0 of 16 singular values'
      detail = 'tie nodes together and'
    []
    [jac]
      type = 'PetscJacobianTester'
      input = tied-nodes.i
      cli_args = "Outputs/active=''"
      detail = 'have a perfect Jacobian'
    []
  []
[]
