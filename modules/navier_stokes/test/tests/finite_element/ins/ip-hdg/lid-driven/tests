[Tests]
  [lid-driven]
    requirement = 'The system shall be able to solve a lid driven cavity using an interior penalty hybridizable discontinuous Galerkin discretization.'
    type = Exodiff
    input = lid-driven.i
    exodiff = lid-driven_out.e
    installation_type = 'in_tree' # uses JIT
  []
  [lid-mms]
    type = PythonUnitTest
    input = test.py
    test_case = TestLid
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a cavity using a interior penalty hybridizable discontinuous Galerkin scheme and produce second order convergence for velocity variables and first order convergence for the pressure variable when using first and zeroth order polynomials respectively.'
    method = '!dbg'
    min_parallel = 4
    required_python_packages = 'pandas matplotlib'
    # skip test if test is being run out-of-tree. Issue Ref: #25279
    installation_type = in_tree
    valgrind = 'none'
  []
  [lid-mms-second]
    type = PythonUnitTest
    input = test.py
    test_case = TestLidSecond
    requirement = 'The system shall be able to solve the incompressible Navier-Stokes equations in a cavity using a interior penalty hybridizable discontinuous Galerkin scheme and produce third order convergence for velocity variables and second order convergence for the pressure variable when using second and first order polynomials respectively.'
    method = '!dbg'
    min_parallel = 4
    required_python_packages = 'pandas matplotlib'
    # skip test if test is being run out-of-tree. Issue Ref: #25279
    installation_type = in_tree
    valgrind = 'none'
  []
  [stokes_symmetric]
    type = CSVDiff
    input = stokes-lid-driven.i
    csvdiff = stokes-lid-driven_out.csv
    requirement = 'The interior penalty hybridizable discontinuous Galerkin discretization of Stokes flow shall be symmetric.'
    installation_type = 'in_tree' # uses JIT
  []
  [matrix_testing]
    type = CSVDiff
    input = matrix-testing.i
    csvdiff = matrix-testing_out.csv
    requirement = 'The system shall be able to generate the product of B_{up} * M_p^{-1} * B_{pu}.'
    installation_type = 'in_tree' # uses JIT
    max_parallel = 1 # No MatLUFactor support for mpidense
    method = "!dbg"
  []
[]
