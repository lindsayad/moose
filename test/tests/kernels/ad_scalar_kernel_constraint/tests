[Tests]
  issues = '#22174'
  design = 'source/kernels/ADScalarLMKernel.md'
  [./kernel_dirichlet]
    requirement = 'The system will produce a harmonic function with a prescribed average value,'
    [physics_separate]
      type = 'Exodiff'
      input = 'scalar_constraint_kernel_RJ.i'
      exodiff = 'scalar_constraint_kernel_RJ_out.e'
      # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
      cli_args = 'Executioner/residual_and_jacobian_together=false'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with separate computation of residual and Jacobian'
    [../]
    [jacobian_separate]
      type = 'PetscJacobianTester'
      run_sim = True
      input = 'scalar_constraint_kernel_RJ.i'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with separate computation of residual and Jacobian'
      cli_args = 'Executioner/residual_and_jacobian_together=false'
      prereq = 'kernel_dirichlet/physics_separate'
    [../]
    [physics_together]
      type = 'Exodiff'
      input = 'scalar_constraint_kernel_RJ.i'
      exodiff = 'scalar_constraint_kernel_RJ_out.e'
      # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
      cli_args = 'Executioner/residual_and_jacobian_together=true'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with computation of residual and Jacobian together'
      prereq = 'kernel_dirichlet/jacobian_separate'
    [../]
    [jacobian_together]
      type = 'PetscJacobianTester'
      run_sim = True
      input = 'scalar_constraint_kernel_RJ.i'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with computation of residual and Jacobian together'
      cli_args = 'Executioner/residual_and_jacobian_together=true'
      prereq = 'kernel_dirichlet/physics_together'
    [../]
  []

  [./kernel_neumann]
    requirement = 'The system shall solve the constrained Neumann problem using the AD Lagrange multiplier approach with LU solver,'
    [physics_separate]
      type = 'CSVDiff'
      input = 'scalar_constraint_together.i'
      csvdiff = 'scalar_constraint_together_out.csv'
      # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
      cli_args = 'Executioner/residual_and_jacobian_together=false'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with separate computation of residual and Jacobian'
    [../]
    [jacobian_separate]
      type = 'PetscJacobianTester'
      run_sim = True
      input = 'scalar_constraint_together.i'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with separate computation of residual and Jacobian'
      cli_args = 'Executioner/residual_and_jacobian_together=false'
      prereq = 'kernel_neumann/physics_separate'
    [../]
    [physics_together]
      type = 'CSVDiff'
      input = 'scalar_constraint_together.i'
      csvdiff = 'scalar_constraint_together_out.csv'
      # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
      cli_args = 'Executioner/residual_and_jacobian_together=true'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with computation of residual and Jacobian together'
      prereq = 'kernel_neumann/jacobian_separate'
    [../]
    [jacobian_together]
      type = 'PetscJacobianTester'
      run_sim = True
      input = 'scalar_constraint_together.i'
      ad_indexing_type = 'global'
      detail = 'showing the correct results with computation of residual and Jacobian together'
      cli_args = 'Executioner/residual_and_jacobian_together=true'
      prereq = 'kernel_neumann/physics_together'
    [../]
  []

  [./kernel_together]
    type = 'CSVDiff'
    input = 'scalar_constraint_together.i'
    csvdiff = 'scalar_constraint_together_out.csv'
    # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
    max_parallel = 4
    requirement = 'The system shall solve the constrained Neumann problem using the AD Lagrange multiplier approach with LU solver; residual and Jacobian together.'
    ad_indexing_type = 'global'
  [../]

  [./bipass]
    type = 'CSVDiff'
    input = 'diffusion_bipass_scalar.i'
    csvdiff = 'diffusion_bipass_scalar_out.csv'
    # This problem only has 4 elements and therefore does not seem to run on > 4 procs.
    max_parallel = 4
    requirement = 'The system shall support the ability to include the AD scalar wrapper but not actually using a scalar variable.'
    ad_indexing_type = 'global'
  [../]
[]
